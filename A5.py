# -*- coding: utf-8 -*-
from __future__ import print_function
import sage.cboot as cb
from sage.misc.cachefunc import cached_function
import os.path
import sys
from sage.rings.rational import Rational
from sage.all import pi, e, euler_gamma, catalan, khinchin, glaisher, sin, cos, tan, sec, csc, cot, sinh, cosh, tanh, sech, csch, coth, asin, acos, atan, asec, acsc, acot, asinh, acosh, atanh, asech, acsch, acoth, sqrt, log, exp, I

context = cb.context_for_scalar(epsilon=0.5, Lambda=11)
spins = list(range(22))
secs = {("rep[1]", 0): 1, ("rep[2]", 0): 1, ("rep[2]", 1): 1, ("rep[3]", 0): 1, ("rep[3]", 1): 1, ("rep[4]", 0): 1, ("rep[4]", 1): 1, ("rep[5]", 0): 1, ("rep[5]", 1): 1}
scalarnum = 1
nu_max = 8
mygap = {}
def gaps(deltas):
	return mygap

save_dir = "."

def get_path(path):
	return os.path.join(save_dir, path)

@cached_function
def prepare_g(spin, Delta_12, Delta_34):
	return context.approx_cb(nu_max, spin, Delta_1_2=Delta_12, Delta_3_4=Delta_34)

def get_shift(gaps, sector, spin):
	if (sector, spin) in gaps: return context(gaps[(sector, spin)])
	elif spin == 0: return context.epsilon
	else: return 2 * context.epsilon + spin

val = [context("1."), context("1."), context("0.28867513459481288225457439025097872782380087563506343800930116324198883615146667284685769779"), context("0.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"), context("0.22360679774997896964091736687312762354406183596115257242708972454105209256378048994144144084"), context("0.2"), context("0.64549722436790281419654423329706660180548695088193180443126229435224718198949650558654789614"), context("0.5"), context("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), context("0.12909944487358056283930884665941332036109739017638636088625245887044943639789930111730957923"), context("0.061237243569579452454932101867647284799148687016416753210817314181274009436432875663496485828"), context("0.04564354645876384278808081523340017782939539124983193785224120414437443976022689448340486968"), context("0.27386127875258305672848489140040106697637234749899162711344722486624663856136136690042921808"), context("0.61237243569579452454932101867647284799148687016416753210817314181274009436432875663496485828"), context("0.30618621784789726227466050933823642399574343508208376605408657090637004718216437831748242914"), context("0.41079191812887458509272733710060160046455852124848744067017083729936995784204205035064382712"), context("0.10062305898749053633841281509290743059482782618251865759219037604347344165370122047364864838"), context("0.05"), context("0.67082039324993690892275210061938287063218550788345771728126917362315627769134146982432432251"), context("1.341640786499873817845504201238765741264371015766915434562538347246312555382682939648648645"), context("0.5"), context("0.22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"), context("1.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), context("0.074535599249992989880305788957709207848020611987050857475696574847017364187926829980480480279"), context("1."), context("0.55901699437494742410229341718281905886015458990288143106772431135263023140945122485360360209"), context("0.4564354645876384278808081523340017782939539124983193785224120414437443976022689448340486968"), context("1."), context("0.66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), context("0.625"), context("0.27950849718747371205114670859140952943007729495144071553386215567631511570472561242680180105"), context("0.15"), context("1."), context("1."), context("0.25"), context("0.75"), context("1.25"), context("1.125"), context("0.83852549156242113615344012577422858829023188485432214660158646702894534711417683728040540314"), context("0.5"), context("0.375"), context("0.1125"), context("0.075"), context("0.15625"), context("0.46875"), context("0.0125"), context("0.125"), context("1.40625"), context("0.78125"), context("0.28125"), context("0.38729833462074168851792653997823996108329217052915908265875737661134830919369790335192873769"), context("1."), context("1.")]
one = context(1)

def make_F_range(delta, sector, num, spin):
	shift = get_shift(gaps(delta), sector, spin)
	sign = one if spin % 2 == 0 else -one
	F = lambda d1, d2, d3, d4: sign * context.dot(context.F_minus_matrix((d2 + d3) / 2), prepare_g(spin, d1 - d2, d3 - d4).shift(shift))
	H = lambda d1, d2, d3, d4: sign * context.dot(context.F_plus_matrix((d2 + d3) / 2), prepare_g(spin, d1 - d2, d3 - d4).shift(shift))
	get = lambda fh, d1, d2, d3, d4: fh(delta[d1], delta[d2], delta[d3], delta[d4])
	if sector == "rep[1]" and spin % 2 == 0 and num == 0:
		bl = [get(F, "e", "e", "e", "e"), get(H, "e", "e", "v", "v"), get(F, "e", "e", "v", "v"), get(H, "e", "e", "t", "t"), get(F, "e", "e", "t", "t"), get(H, "v", "v", "v", "v"), get(F, "v", "v", "v", "v"), get(H, "v", "v", "t", "t"), get(F, "v", "v", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
		return [[[val[1] * bl[0], 0, 0], [0, 0, 0], [0, 0, 0]], [[0, val[2] * bl[1], 0], [val[2] * bl[1], 0, 0], [0, 0, 0]], [[0, val[2] * bl[2], 0], [val[2] * bl[2], 0, 0], [0, 0, 0]], [[0, 0, val[4] * bl[3]], [0, 0, 0], [val[4] * bl[3], 0, 0]], [[0, 0, val[4] * bl[4]], [0, 0, 0], [val[4] * bl[4], 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, val[3] * bl[5], 0], [0, 0, 0]], [[0, 0, 0], [0, val[3] * bl[6], 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, val[9] * bl[7]], [0, val[9] * bl[7], 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, val[9] * bl[8]], [0, val[9] * bl[8], 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, val[5] * bl[9]]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, val[5] * bl[10]]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]
	if sector == "rep[2]" and spin % 2 == 0 and num == 0:
		bl = [get(H, "e", "v", "v", "e"), get(F, "e", "v", "v", "e"), get(F, "e", "v", "e", "v"), get(H, "e", "v", "v", "t"), get(F, "e", "v", "v", "t"), get(F, "e", "v", "t", "v"), get(H, "v", "t", "t", "v"), get(F, "v", "t", "t", "v"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t")]
		return [[[0, 0], [0, 0]], [[-val[3] * bl[0], 0], [0, 0]], [[val[3] * bl[1], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[val[1] * bl[2], 0], [0, 0]], [[0, -val[6] * bl[3]], [-val[6] * bl[3], 0]], [[0, val[6] * bl[4]], [val[6] * bl[4], 0]], [[0, val[20] * bl[5]], [val[20] * bl[5], 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[1] * bl[6]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[1] * bl[7]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[1] * bl[8]]], [[0, 0], [0, val[1] * bl[9]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]]
	if sector == "rep[2]" and spin % 2 == 1 and num == 0:
		bl = [get(H, "e", "v", "v", "e"), get(F, "e", "v", "v", "e"), get(F, "e", "v", "e", "v"), get(H, "e", "v", "v", "t"), get(F, "e", "v", "v", "t"), get(F, "e", "v", "t", "v"), get(H, "e", "v", "t", "t"), get(F, "e", "v", "t", "t"), get(H, "v", "v", "v", "v"), get(F, "v", "v", "v", "v"), get(H, "v", "v", "t", "t"), get(H, "v", "t", "t", "v"), get(F, "v", "v", "t", "t"), get(F, "v", "t", "t", "v"), get(H, "v", "v", "v", "t"), get(F, "v", "v", "v", "t"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t"), get(H, "v", "t", "t", "t"), get(F, "v", "t", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
		return [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[val[3] * bl[0], 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[-val[3] * bl[1], 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[val[1] * bl[2], 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, -val[6] * bl[3], 0, 0], [-val[6] * bl[3], 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, val[6] * bl[4], 0, 0], [val[6] * bl[4], 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, -val[20] * bl[5], 0, 0], [-val[20] * bl[5], 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, val[7] * bl[6], 0], [0, 0, 0, 0], [val[7] * bl[6], 0, 0, 0], [0, 0, 0, 0]], [[0, 0, val[7] * bl[7], 0], [0, 0, 0, 0], [val[7] * bl[7], 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, val[8] * bl[8]]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, -val[21] * bl[9]]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, val[22] * bl[9]]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, -val[23] * bl[10]], [0, 0, -val[23] * bl[10], 0]], [[0, 0, 0, 0], [0, -val[24] * bl[11], 0, 0], [0, 0, 0, -val[25] * bl[10]], [0, 0, -val[25] * bl[10], 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, val[25] * bl[10]], [0, 0, val[25] * bl[10], 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, -val[23] * bl[12]], [0, 0, -val[23] * bl[12], 0]], [[0, 0, 0, 0], [0, -val[24] * bl[13], 0, 0], [0, 0, 0, val[25] * bl[12]], [0, 0, val[25] * bl[12], 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, -val[25] * bl[12]], [0, 0, -val[25] * bl[12], 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, val[7] * bl[14]], [0, 0, 0, 0], [0, val[7] * bl[14], 0, 0]], [[0, 0, 0, 0], [0, 0, 0, val[7] * bl[15]], [0, 0, 0, 0], [0, val[7] * bl[15], 0, 0]], [[0, 0, 0, 0], [0, val[1] * bl[16], 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, val[1] * bl[17], 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, val[7] * bl[18], 0], [0, val[7] * bl[18], 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, -val[13] * bl[19], 0], [0, -val[13] * bl[19], 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, val[26] * bl[19], 0], [0, val[26] * bl[19], 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, val[0] * bl[20], 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, val[0] * bl[21], 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]
	if sector == "rep[3]" and spin % 2 == 0 and num == 0:
		bl = [get(H, "v", "t", "t", "v"), get(F, "v", "t", "t", "v"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t")]
		return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -val[27] * bl[0], 0, 0, 0, -val[27] * bl[1], 0, 0, -val[28] * bl[2], 0, 0, val[1] * bl[3], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	if sector == "rep[3]" and spin % 2 == 1 and num == 0:
		bl = [get(H, "v", "t", "t", "v"), get(F, "v", "t", "t", "v"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t"), get(H, "v", "t", "t", "t"), get(F, "v", "t", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
		return [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[val[0] * bl[0], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[val[0] * bl[1], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[-val[28] * bl[2], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[val[0] * bl[3], 0], [0, 0]], [[0, val[29] * bl[4]], [val[29] * bl[4], 0]], [[0, val[30] * bl[4]], [val[30] * bl[4], 0]], [[0, -val[14] * bl[4]], [-val[14] * bl[4], 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, val[7] * bl[5]], [val[7] * bl[5], 0]], [[0, 0], [0, val[31] * bl[6]]], [[0, 0], [0, val[32] * bl[6]]], [[0, 0], [0, -val[33] * bl[6]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[0] * bl[7]]]]
	if sector == "rep[4]" and spin % 2 == 0 and num == 0:
		bl = [get(H, "v", "t", "t", "v"), get(F, "v", "t", "t", "v"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t"), get(H, "v", "t", "t", "t"), get(F, "v", "t", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
		return [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[-val[34] * bl[0], 0], [0, 0]], [[-val[35] * bl[0], 0], [0, 0]], [[val[36] * bl[0], 0], [0, 0]], [[val[35] * bl[0], 0], [0, 0]], [[val[34] * bl[1], 0], [0, 0]], [[-val[35] * bl[1], 0], [0, 0]], [[val[36] * bl[1], 0], [0, 0]], [[val[35] * bl[1], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[-val[28] * bl[2], 0], [0, 0]], [[val[37] * bl[3], 0], [0, 0]], [[val[29] * bl[3], 0], [0, 0]], [[-val[35] * bl[3], 0], [0, 0]], [[0, -val[29] * bl[4]], [-val[29] * bl[4], 0]], [[0, -val[38] * bl[4]], [-val[38] * bl[4], 0]], [[0, 0], [0, 0]], [[0, val[39] * bl[5]], [val[39] * bl[5], 0]], [[0, 0], [0, 0]], [[0, val[40] * bl[5]], [val[40] * bl[5], 0]], [[0, 0], [0, -val[41] * bl[6]]], [[0, 0], [0, -val[36] * bl[6]]], [[0, 0], [0, 0]], [[0, 0], [0, val[42] * bl[7]]], [[0, 0], [0, val[43] * bl[7]]], [[0, 0], [0, -val[44] * bl[7]]], [[0, 0], [0, val[44] * bl[7]]], [[0, 0], [0, val[44] * bl[7]]]]
	if sector == "rep[4]" and spin % 2 == 1 and num == 0:
		bl = [get(H, "v", "t", "t", "v"), get(F, "v", "t", "t", "v"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t"), get(H, "v", "t", "t", "t"), get(F, "v", "t", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
		return [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[val[34] * bl[0], 0], [0, 0]], [[val[35] * bl[0], 0], [0, 0]], [[-val[36] * bl[0], 0], [0, 0]], [[-val[35] * bl[0], 0], [0, 0]], [[-val[34] * bl[1], 0], [0, 0]], [[val[35] * bl[1], 0], [0, 0]], [[-val[36] * bl[1], 0], [0, 0]], [[-val[35] * bl[1], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[-val[28] * bl[2], 0], [0, 0]], [[val[37] * bl[3], 0], [0, 0]], [[val[29] * bl[3], 0], [0, 0]], [[-val[35] * bl[3], 0], [0, 0]], [[0, 0], [0, 0]], [[0, -val[25] * bl[4]], [-val[25] * bl[4], 0]], [[0, -val[14] * bl[4]], [-val[14] * bl[4], 0]], [[0, -val[35] * bl[5]], [-val[35] * bl[5], 0]], [[0, val[25] * bl[5]], [val[25] * bl[5], 0]], [[0, -val[40] * bl[5]], [-val[40] * bl[5], 0]], [[0, 0], [0, val[45] * bl[6]]], [[0, 0], [0, -val[35] * bl[6]]], [[0, 0], [0, 0]], [[0, 0], [0, -val[46] * bl[7]]], [[0, 0], [0, val[47] * bl[7]]], [[0, 0], [0, val[48] * bl[7]]], [[0, 0], [0, -val[49] * bl[7]]], [[0, 0], [0, -val[49] * bl[7]]]]
	if sector == "rep[5]" and spin % 2 == 0 and num == 0:
		bl = [get(H, "e", "t", "t", "e"), get(F, "e", "t", "t", "e"), get(H, "e", "t", "v", "v"), get(F, "e", "t", "v", "v"), get(H, "e", "t", "t", "v"), get(F, "e", "t", "t", "v"), get(F, "e", "t", "e", "t"), get(H, "e", "t", "v", "t"), get(F, "e", "t", "t", "t"), get(H, "v", "v", "v", "v"), get(F, "v", "v", "v", "v"), get(H, "v", "v", "t", "t"), get(H, "v", "t", "t", "v"), get(F, "v", "v", "t", "t"), get(F, "v", "t", "t", "v"), get(H, "v", "v", "v", "t"), get(F, "v", "v", "v", "t"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t"), get(H, "v", "t", "t", "t"), get(F, "v", "t", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
		return [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[-val[5] * bl[0], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[val[5] * bl[1], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, val[20] * bl[2], 0, 0, 0], [val[20] * bl[2], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, val[20] * bl[3], 0, 0, 0], [val[20] * bl[3], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, val[50] * bl[4], 0, 0], [0, 0, 0, 0, 0], [val[50] * bl[4], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, -val[50] * bl[5], 0, 0], [0, 0, 0, 0, 0], [-val[50] * bl[5], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[val[1] * bl[6], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, -val[20] * bl[7], 0, 0], [0, 0, 0, 0, 0], [-val[20] * bl[7], 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, val[20] * bl[8], 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [val[20] * bl[8], 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, -val[20] * bl[8]], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [-val[20] * bl[8], 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, -val[8] * bl[9], 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, val[1] * bl[10], 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, val[10] * bl[11], val[11] * bl[11]], [0, 0, 0, 0, 0], [0, val[10] * bl[11], 0, 0, 0], [0, val[11] * bl[11], 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, val[12] * bl[11]], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, val[12] * bl[11], 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, -val[13] * bl[11], 0], [0, 0, -val[51] * bl[12], 0, 0], [0, -val[13] * bl[11], 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, -val[14] * bl[11], -val[15] * bl[11]], [0, 0, 0, 0, 0], [0, -val[14] * bl[11], 0, 0, 0], [0, -val[15] * bl[11], 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, val[10] * bl[13], val[11] * bl[13]], [0, 0, 0, 0, 0], [0, val[10] * bl[13], 0, 0, 0], [0, val[11] * bl[13], 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, -val[12] * bl[13]], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, -val[12] * bl[13], 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, val[13] * bl[13], 0], [0, 0, -val[51] * bl[14], 0, 0], [0, val[13] * bl[13], 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, val[14] * bl[13], val[15] * bl[13]], [0, 0, 0, 0, 0], [0, val[14] * bl[13], 0, 0, 0], [0, val[15] * bl[13], 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, val[18] * bl[15], 0, 0], [0, val[18] * bl[15], 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, -val[4] * bl[16], 0, 0], [0, -val[4] * bl[16], 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, val[3] * bl[17], 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, val[1] * bl[18], 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, val[7] * bl[19], 0], [0, 0, val[7] * bl[19], 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, val[7] * bl[19]], [0, 0, 0, 0, 0], [0, 0, val[7] * bl[19], 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, val[7] * bl[20], 0], [0, 0, val[7] * bl[20], 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, val[7] * bl[20]], [0, 0, 0, 0, 0], [0, 0, val[7] * bl[20], 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, val[16] * bl[21]], [0, 0, 0, val[16] * bl[21], -val[17] * bl[21]]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, val[1] * bl[21], val[18] * bl[21]], [0, 0, 0, val[18] * bl[21], 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, -val[19] * bl[21]], [0, 0, 0, -val[19] * bl[21], 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, val[1] * bl[22], 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, val[52] * bl[22]]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, val[4] * bl[22]], [0, 0, 0, val[4] * bl[22], 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, -val[4] * bl[22]], [0, 0, 0, -val[4] * bl[22], 0]]]
	if sector == "rep[5]" and spin % 2 == 1 and num == 0:
		bl = [get(H, "e", "t", "t", "e"), get(F, "e", "t", "t", "e"), get(H, "e", "t", "t", "v"), get(F, "e", "t", "t", "v"), get(F, "e", "t", "e", "t"), get(H, "e", "t", "v", "t"), get(H, "v", "t", "t", "v"), get(F, "v", "t", "t", "v"), get(H, "v", "t", "v", "t"), get(F, "v", "t", "v", "t")]
		return [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[val[5] * bl[0], 0], [0, 0]], [[-val[5] * bl[1], 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, val[50] * bl[2]], [val[50] * bl[2], 0]], [[0, -val[50] * bl[3]], [-val[50] * bl[3], 0]], [[val[1] * bl[4], 0], [0, 0]], [[0, val[7] * bl[5]], [val[7] * bl[5], 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[0] * bl[6]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[0] * bl[7]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, val[3] * bl[8]]], [[0, 0], [0, 0]], [[0, 0], [0, val[0] * bl[9]]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]]
	raise RuntimeError("unknown sector name")

def make_F_scalar(delta, num):
	F = lambda d1, d2, d3, d4, d: context.dot(context.F_minus_matrix((d2 + d3) / 2), context.gBlock(0, d, d1 - d2, d3 - d4))
	H = lambda d1, d2, d3, d4, d: context.dot(context.F_plus_matrix((d2 + d3) / 2), context.gBlock(0, d, d1 - d2, d3 - d4))
	get = lambda fh, d1, d2, d3, d4, d: fh(delta[d1], delta[d2], delta[d3], delta[d4], delta[d])
	if num == 0:
		bl = [get(F, "e", "e", "e", "e", "e"), get(H, "e", "e", "v", "v", "e"), get(H, "e", "v", "v", "e", "v"), get(F, "e", "e", "v", "v", "e"), get(F, "e", "v", "v", "e", "v"), get(H, "e", "e", "t", "t", "e"), get(H, "e", "t", "t", "e", "t"), get(F, "e", "e", "t", "t", "e"), get(F, "e", "t", "t", "e", "t"), get(F, "e", "v", "e", "v", "v"), get(H, "e", "v", "v", "t", "v"), get(H, "e", "t", "v", "v", "t"), get(F, "e", "v", "v", "t", "v"), get(F, "e", "t", "v", "v", "t"), get(F, "e", "v", "t", "v", "v"), get(F, "e", "t", "e", "t", "t"), get(F, "e", "t", "t", "t", "t"), get(H, "v", "v", "v", "v", "e"), get(H, "v", "v", "v", "v", "t"), get(F, "v", "v", "v", "v", "e"), get(F, "v", "v", "v", "v", "t"), get(H, "v", "v", "t", "t", "e"), get(H, "v", "v", "t", "t", "t"), get(H, "v", "t", "t", "v", "v"), get(F, "v", "v", "t", "t", "e"), get(F, "v", "v", "t", "t", "t"), get(F, "v", "t", "t", "v", "v"), get(H, "v", "t", "v", "t", "v"), get(F, "v", "t", "v", "t", "v"), get(H, "t", "t", "t", "t", "e"), get(H, "t", "t", "t", "t", "t"), get(F, "t", "t", "t", "t", "e"), get(F, "t", "t", "t", "t", "t")]
		return [[[val[1] * bl[0], 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, val[2] * bl[1], 0, 0, 0, 0], [val[2] * bl[1], -val[3] * bl[2], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, val[2] * bl[3], 0, 0, 0, 0], [val[2] * bl[3], val[3] * bl[4], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, val[4] * bl[5], 0, 0, 0], [0, 0, 0, 0, 0, 0], [val[4] * bl[5], 0, -val[5] * bl[6], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, val[4] * bl[7], 0, 0, 0], [0, 0, 0, 0, 0, 0], [val[4] * bl[7], 0, val[5] * bl[8], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, val[0] * bl[9], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, -val[6] * bl[10], 0, 0], [0, 0, 0, val[7] * bl[11], 0, 0], [0, -val[6] * bl[10], val[7] * bl[11], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, val[6] * bl[12], 0, 0], [0, 0, 0, val[7] * bl[13], 0, 0], [0, val[6] * bl[12], val[7] * bl[13], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, val[7] * bl[14], 0, 0], [0, 0, 0, 0, 0, 0], [0, val[7] * bl[14], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, val[0] * bl[15], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, val[7] * bl[16], 0], [0, 0, 0, 0, 0, 0], [0, 0, val[7] * bl[16], 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, val[7] * bl[16]], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, val[7] * bl[16], 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, val[3] * bl[17], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, -val[8] * bl[18], 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, val[3] * bl[19], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, val[0] * bl[20], 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, val[9] * bl[21], 0, 0, 0], [0, val[9] * bl[21], 0, 0, 0, 0], [0, 0, 0, 0, val[10] * bl[22], -val[11] * bl[22]], [0, 0, 0, val[10] * bl[22], 0, 0], [0, 0, 0, -val[11] * bl[22], 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, val[0] * bl[23], 0, -val[12] * bl[22]], [0, 0, 0, 0, 0, 0], [0, 0, 0, -val[12] * bl[22], 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -val[13] * bl[22], 0], [0, 0, 0, -val[13] * bl[22], 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -val[14] * bl[22], val[15] * bl[22]], [0, 0, 0, -val[14] * bl[22], 0, 0], [0, 0, 0, val[15] * bl[22], 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, val[9] * bl[24], 0, 0, 0], [0, val[9] * bl[24], 0, 0, 0, 0], [0, 0, 0, 0, val[10] * bl[25], -val[11] * bl[25]], [0, 0, 0, val[10] * bl[25], 0, 0], [0, 0, 0, -val[11] * bl[25], 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, val[0] * bl[26], 0, val[12] * bl[25]], [0, 0, 0, 0, 0, 0], [0, 0, 0, val[12] * bl[25], 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, val[13] * bl[25], 0], [0, 0, 0, val[13] * bl[25], 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, val[14] * bl[25], -val[15] * bl[25]], [0, 0, 0, val[14] * bl[25], 0, 0], [0, 0, 0, -val[15] * bl[25], 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, val[0] * bl[27], 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, val[0] * bl[28], 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, val[5] * bl[29], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -val[16] * bl[30]], [0, 0, 0, 0, -val[16] * bl[30], -val[17] * bl[30]]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, val[0] * bl[30], -val[18] * bl[30]], [0, 0, 0, 0, -val[18] * bl[30], 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, val[19] * bl[30]], [0, 0, 0, 0, val[19] * bl[30], 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, val[5] * bl[31], 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, val[0] * bl[32], 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, val[0] * bl[32]]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -val[4] * bl[32]], [0, 0, 0, 0, -val[4] * bl[32], 0]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, val[4] * bl[32]], [0, 0, 0, 0, val[4] * bl[32], 0]]]
	raise RuntimeError("unknown sector number")

def make_F_unit(delta):
	F = lambda d1, d2, d3, d4: context.dot(context.F_minus_matrix((d2 + d3) / 2), context.gBlock(0, 0, d1 - d2, d3 - d4))
	H = lambda d1, d2, d3, d4: context.dot(context.F_plus_matrix((d2 + d3) / 2), context.gBlock(0, 0, d1 - d2, d3 - d4))
	get = lambda fh, d1, d2, d3, d4: fh(delta[d1], delta[d2], delta[d3], delta[d4])
	bl = [get(F, "e", "e", "e", "e"), get(H, "e", "e", "v", "v"), get(F, "e", "e", "v", "v"), get(H, "e", "e", "t", "t"), get(F, "e", "e", "t", "t"), get(H, "v", "v", "v", "v"), get(F, "v", "v", "v", "v"), get(H, "v", "v", "t", "t"), get(F, "v", "v", "t", "t"), get(H, "t", "t", "t", "t"), get(F, "t", "t", "t", "t")]
	return [val[0] * bl[0], val[0] * bl[1], val[0] * bl[2], val[0] * bl[3], val[0] * bl[4], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, val[0] * bl[5], val[0] * bl[6], 0, val[0] * bl[7], 0, 0, 0, val[0] * bl[8], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, val[0] * bl[9], 0, 0, val[0] * bl[10], 0, 0, 0, 0]

def make_SDP(delta):
	cdel = dict()
	for k in delta: cdel[k] = context(delta[k])
	pvms = []
	for sec in secs:
		for spin in spins:
			if spin % 2 == sec[1]:
				for num in range(secs[sec]): pvms.append(make_F_range(cdel, sec[0], num, spin))
	for num in range(scalarnum): pvms.append(make_F_scalar(cdel, num))
	norm = make_F_unit(cdel)
	obj = 0
	return context.sumrule_to_SDP(norm, obj, pvms)

def name(deltas):
	return "sdp-{0[e]}-{0[v]}-{0[t]}".format(deltas).replace("/", "#")

def has_done(deltas):
	return os.path.exists(get_path(name(deltas) + ".xml"))

def writefl(mes):
	print(mes, end="")
	sys.stdout.flush()

def write_SDP(deltas):
	prob = get_path(name(deltas) + ".xml")
	if not has_done(deltas): make_SDP(deltas).write(prob)
